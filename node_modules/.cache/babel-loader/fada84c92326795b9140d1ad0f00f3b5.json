{"ast":null,"code":"var _jsxFileName = \"/Users/jennyhwang/Desktop/ReactTypescriptTodos/src/components/NewTodo.tsx\",\n    _s = $RefreshSig$();\n\nimport { useRef, useContext } from 'react';\nimport classes from \"./NewTodo.module.css\";\nimport TodosContext from '../store/todos-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewTodo = () => {\n  _s();\n\n  const todosCtx = useContext(TodosContext); //html input element does not have a value at \n  //beginning so set it\n  //to null\n\n  const todoTextInputRef = useRef(null);\n\n  const submitHandler = event => {\n    event.preventDefault(); //  question mark signals to typescript to try and access the value and \n    //if it succeeds the entered value is stored into todoText.\n    // use an exclamation mark instead of question mark if you are sure that\n    //that value will never be null at that spot\n\n    const enteredText = todoTextInputRef.current.value;\n\n    if (enteredText.trim().length === 0) {\n      // throw an error\n      return;\n    }\n\n    props.onAddTodo(enteredText);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: classes.form,\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"text\",\n      children: \"Todo text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"text\",\n      ref: todoTextInputRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Add Todo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NewTodo, \"YB1fkRv4yr5/htWMpjLrkBnV8DU=\");\n\n_c = NewTodo;\nexport default NewTodo;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewTodo\");","map":{"version":3,"names":["useRef","useContext","classes","TodosContext","NewTodo","todosCtx","todoTextInputRef","submitHandler","event","preventDefault","enteredText","current","value","trim","length","props","onAddTodo","form"],"sources":["/Users/jennyhwang/Desktop/ReactTypescriptTodos/src/components/NewTodo.tsx"],"sourcesContent":["import { useRef, useContext } from 'react';\nimport classes from \"./NewTodo.module.css\";\nimport TodosContext from '../store/todos-context';\n\nconst NewTodo: React.FC = () => {\n  \nconst todosCtx = useContext(TodosContext)\n\n\n      //html input element does not have a value at \n    //beginning so set it\n    //to null\n  const todoTextInputRef = useRef<HTMLInputElement>(null);\n\n  const submitHandler = (event: React.FormEvent) => {\n    event.preventDefault();\n\n\n\n//  question mark signals to typescript to try and access the value and \n//if it succeeds the entered value is stored into todoText.\n// use an exclamation mark instead of question mark if you are sure that\n//that value will never be null at that spot\n    const enteredText = todoTextInputRef.current!.value;\n\n    if (enteredText.trim().length === 0) {\n      // throw an error\n      return;\n    }\n\n    props.onAddTodo(enteredText);\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitHandler}>\n      <label htmlFor='text'>Todo text</label>\n      <input type='text' id='text' ref={todoTextInputRef} />\n      <button>Add Todo</button>\n    </form>\n  );\n};\n\nexport default NewTodo;\n"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,UAAjB,QAAmC,OAAnC;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,YAAP,MAAyB,wBAAzB;;;AAEA,MAAMC,OAAiB,GAAG,MAAM;EAAA;;EAEhC,MAAMC,QAAQ,GAAGJ,UAAU,CAACE,YAAD,CAA3B,CAFgC,CAK1B;EACF;EACA;;EACF,MAAMG,gBAAgB,GAAGN,MAAM,CAAmB,IAAnB,CAA/B;;EAEA,MAAMO,aAAa,GAAIC,KAAD,IAA4B;IAChDA,KAAK,CAACC,cAAN,GADgD,CAKpD;IACA;IACA;IACA;;IACI,MAAMC,WAAW,GAAGJ,gBAAgB,CAACK,OAAjB,CAA0BC,KAA9C;;IAEA,IAAIF,WAAW,CAACG,IAAZ,GAAmBC,MAAnB,KAA8B,CAAlC,EAAqC;MACnC;MACA;IACD;;IAEDC,KAAK,CAACC,SAAN,CAAgBN,WAAhB;EACD,CAjBD;;EAmBA,oBACE;IAAM,SAAS,EAAER,OAAO,CAACe,IAAzB;IAA+B,QAAQ,EAAEV,aAAzC;IAAA,wBACE;MAAO,OAAO,EAAC,MAAf;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAO,IAAI,EAAC,MAAZ;MAAmB,EAAE,EAAC,MAAtB;MAA6B,GAAG,EAAED;IAAlC;MAAA;MAAA;MAAA;IAAA,QAFF,eAGE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAHF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAOD,CApCD;;GAAMF,O;;KAAAA,O;AAsCN,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}