{"ast":null,"code":"import{useRef,useContext}from'react';import classes from\"./NewTodo.module.css\";import TodosContext from'../store/todos-context';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var NewTodo=function NewTodo(){var todosCtx=useContext(TodosContext);//html input element does not have a value at \n//beginning so set it\n//to null\nvar todoTextInputRef=useRef(null);var submitHandler=function submitHandler(event){event.preventDefault();//  question mark signals to typescript to try and access the value and \n//if it succeeds the entered value is stored into todoText.\n// use an exclamation mark instead of question mark if you are sure that\n//that value will never be null at that spot\nvar enteredText=todoTextInputRef.current.value;if(enteredText.trim().length===0){// throw an error\nreturn;}todosCtx.addTodo(enteredText);};return/*#__PURE__*/_jsxs(\"form\",{className:classes.form,onSubmit:submitHandler,children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"text\",children:\"Todo text\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"text\",ref:todoTextInputRef}),/*#__PURE__*/_jsx(\"button\",{children:\"Add Todo\"})]});};export default NewTodo;","map":{"version":3,"names":["useRef","useContext","classes","TodosContext","NewTodo","todosCtx","todoTextInputRef","submitHandler","event","preventDefault","enteredText","current","value","trim","length","addTodo","form"],"sources":["C:/Users/jenny/OneDrive/Desktop/reactTypescriptTODOS/ReactTypeScriptTodos/src/components/NewTodo.tsx"],"sourcesContent":["import { useRef, useContext } from 'react';\r\nimport classes from \"./NewTodo.module.css\";\r\nimport TodosContext from '../store/todos-context';\r\n\r\nconst NewTodo: React.FC = () => {\r\n  \r\nconst todosCtx = useContext(TodosContext)\r\n\r\n\r\n      //html input element does not have a value at \r\n    //beginning so set it\r\n    //to null\r\n  const todoTextInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const submitHandler = (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n\r\n\r\n\r\n//  question mark signals to typescript to try and access the value and \r\n//if it succeeds the entered value is stored into todoText.\r\n// use an exclamation mark instead of question mark if you are sure that\r\n//that value will never be null at that spot\r\n    const enteredText = todoTextInputRef.current!.value;\r\n\r\n    if (enteredText.trim().length === 0) {\r\n      // throw an error\r\n      return;\r\n    }\r\n\r\n   todosCtx.addTodo(enteredText);\r\n  };\r\n\r\n  return (\r\n    <form className={classes.form} onSubmit={submitHandler}>\r\n      <label htmlFor='text'>Todo text</label>\r\n      <input type='text' id='text' ref={todoTextInputRef} />\r\n      <button>Add Todo</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default NewTodo;\r\n"],"mappings":"AAAA,OAASA,MAAT,CAAiBC,UAAjB,KAAmC,OAAnC,CACA,MAAOC,QAAP,KAAoB,sBAApB,CACA,MAAOC,aAAP,KAAyB,wBAAzB,C,wFAEA,GAAMC,QAAiB,CAAG,QAApBA,QAAoB,EAAM,CAEhC,GAAMC,SAAQ,CAAGJ,UAAU,CAACE,YAAD,CAA3B,CAGM;AACF;AACA;AACF,GAAMG,iBAAgB,CAAGN,MAAM,CAAmB,IAAnB,CAA/B,CAEA,GAAMO,cAAa,CAAG,QAAhBA,cAAgB,CAACC,KAAD,CAA4B,CAChDA,KAAK,CAACC,cAAN,GAIJ;AACA;AACA;AACA;AACI,GAAMC,YAAW,CAAGJ,gBAAgB,CAACK,OAAjB,CAA0BC,KAA9C,CAEA,GAAIF,WAAW,CAACG,IAAZ,GAAmBC,MAAnB,GAA8B,CAAlC,CAAqC,CACnC;AACA,OACD,CAEFT,QAAQ,CAACU,OAAT,CAAiBL,WAAjB,EACA,CAjBD,CAmBA,mBACE,cAAM,SAAS,CAAER,OAAO,CAACc,IAAzB,CAA+B,QAAQ,CAAET,aAAzC,wBACE,cAAO,OAAO,CAAC,MAAf,uBADF,cAEE,cAAO,IAAI,CAAC,MAAZ,CAAmB,EAAE,CAAC,MAAtB,CAA6B,GAAG,CAAED,gBAAlC,EAFF,cAGE,oCAHF,GADF,CAOD,CApCD,CAsCA,cAAeF,QAAf"},"metadata":{},"sourceType":"module"}